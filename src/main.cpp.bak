#include <sqlite3.h>

import <iostream>
#include <vector>
#include <string>
#include <filesystem>


#define DB_NAME "virfs"

using namespace std;

enum filetype {
    TEXT,
    AUDIO,
};

struct file_metadata {
    string filename;
    uintmax_t filesize;
};

bool verify_dir_exists(const string str_path)
{
    filesystem::path dir_path(str_path);

    if(!filesystem::exists(dir_path)) {
        return false;
    }

    if(!filesystem::is_directory(dir_path)) {
        return false;
    }

    return true;
}

uintmax_t compute_file_size(const filesystem::path& path)
{
    if (filesystem::exists(path) && filesystem::is_regular_file(path))
    {
        auto err = error_code{};
        auto filesize = filesystem::file_size(path, err);
        if (filesize != static_cast<uintmax_t>(-1))
            return filesize;
    }
    return static_cast<uintmax_t>(-1);
}

bool get_metadata(const filesystem::path& path, file_metadata* const fm)
{
    if (filesystem::exists(path) && filesystem::is_regular_file(path))
    {
        fm->filesize = compute_file_size(path);
        if(path.has_filename()) {
            fm->filename = path.filename();
        }
        return true;
    }
    return false;
}

vector<file_metadata> get_recursive_file_metadata(const filesystem::path& dir_path)
{
    vector<file_metadata> fm_vec = {};
    for(filesystem::path f_path : filesystem::recursive_directory_iterator(dir_path)) {
        file_metadata fm = {};
        if(get_metadata(f_path, &fm)) {
            fm_vec.push_back(fm);
        }
    }
    return fm_vec;
}

bool print_metadata(vector<file_metadata> fm_vec)
{
    for(file_metadata fm : fm_vec) {
        cout << "filename: " << fm.filename << endl;
        cout << "file size: " << fm.filesize << endl;
        cout << "\n";
    }
    return true;
}

int main(int argc, char **argv)
{
    if( argc != 2 ) {
        std::cerr << "Usage: " << argv[0] << " <directory-path>" << endl;
        return 1;
    }

    if(!verify_dir_exists(argv[1])) {
        cerr << argv[1] << " is not a valid directory path." << endl;
        return 1;
    }

    filesystem::path dir_path(argv[1]);
    auto fm_vec = get_recursive_file_metadata(dir_path);
    print_metadata(fm_vec);

    /*
    sqlite3 *db;
    char zErrMsg = 0;

    int rc;
    rc = sqlite3_open(DB_NAME, &db);
    if( rc == SQLITE_OK ) {
        printf("Opened database.\n");
    }
    if( db == NULL ) {
        printf("[ERROR]: Unable to allocate memory for db.\n");
    }
    */

    return 0;
}
